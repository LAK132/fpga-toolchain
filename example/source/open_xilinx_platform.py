# Copyright (C) 2019-2021 Amaranth HDL contributors
# Copyright (C) 2011-2019 M-Labs Limited
#
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


from amaranth.hdl import *
from amaranth.build import *
from amaranth.vendor.xilinx import *


__all__ = ["OpenXilinxPlatform"]


class OpenXilinxPlatform(XilinxPlatform):
    """
    .. rubric:: ghdl_yosys_nextpnr_prjxray toolchain

    Required tools:
        * ``yosys``
        * ``nextpnr-xilinx``
        * ``fasm2frames``
        * ``xc7frames2bit``

    The environment is populated by running the script specified in the environment variable
    ``AMARANTH_ENV_Symbiflow``, if present.

    Available overrides:
        * ``nextpnr_dir``: overrides toolchain db path.
    """

    _ghdl_yosys_nextpnr_prjxray_part_map = {
        "xc7a35ticsg324-1L":  "xc7a35tcsg324-1",  # Arty-A7 35t
        "xc7a100ticsg324-1L": "xc7a100tcsg324-1",  # Arty-A7 100t
    }

    _ghdl_yosys_nextpnr_prjxray_device = {
        "xc7a35ti":  "xc7a35t",
        "xc7a100ti": "xc7a100t",
    }

    _ghdl_yosys_nextpnr_prjxray_family = {
        "xc7a": "artix7",
        "xc7z": "zynq7",
    }

    _ghdl_yosys_nextpnr_prjxray_required_tools = [
        "yosys",
        "nextpnr-xilinx",
        "fasm2frames",
        "xc7frames2bit"
    ]
    _ghdl_yosys_nextpnr_prjxray_file_templates = {
        **TemplatedPlatform.build_script_templates,
        "build_{{name}}.sh": r"""
            # {{autogenerated}}
            set -e{{verbose("x")}}
            if [ -z "$BASH" ] ; then exec /bin/bash "$0" "$@"; fi
            [ -n "${{platform._deprecated_toolchain_env_var}}" ] && . "${{platform._deprecated_toolchain_env_var}}"
            [ -n "${{platform._toolchain_env_var}}" ] && . "${{platform._toolchain_env_var}}"
            {{emit_commands("sh")}}
        """,
        "{{name}}.v": r"""
            /* {{autogenerated}} */
            {{emit_verilog()}}
        """,
        "{{name}}.debug.v": r"""
            /* {{autogenerated}} */
            {{emit_debug_verilog()}}
        """,
        "{{name}}.xdc": r"""
            # {{autogenerated}}
            {% for port_name, pin_name, attrs in platform.iter_port_constraints_bits() -%}
                {% for attr_name, attr_value in attrs.items() -%}
                    set_property {{attr_name}} {{attr_value}} [get_ports {{port_name|tcl_escape}}]
                    set_property LOC {{pin_name}} [get_ports {{port_name|tcl_escape}}]
                {% endfor %}
            {% endfor %}
        """,
        "{{name}}.ys": r"""
            {% for (library, files) in platform.ghdl_libraries.items() -%}
            ghdl -a --work={{library}} {% for file in files -%} {{file}} {% endfor %};
            {% endfor %}
            {% for top in platform.ghdl_tops -%}
            ghdl --work=work --latches {% for file in platform.iter_files(".vhd", ".vhdl") -%} {{file}} {% endfor %} -e {{top}};
            {% endfor %}
            synth_xilinx -flatten -abc9 -nobram -arch xc7 -top {{name}};
            write_json {{name}}.json
        """
    }
    _ghdl_yosys_nextpnr_prjxray_command_templates = [
        r"""
        PRJXRAY_DB_DIR={{get_override("prjxray_db_dir")|default("/usr/share/nextpnr/prjxray-db")}}
        """,
        r"""
        NEXPNR_CHIPDB_DIR={{get_override("nextpnr_db_dir")|default("/usr/share/nextpnr/xilinx-chipdb")}}
        """,
        r"""
        PART={{platform._ghdl_yosys_nextpnr_prjxray_part_map.get(platform._part, platform._part)}}
        """,
        r"""
        FAMILY={{platform._ghdl_yosys_nextpnr_prjxray_family[platform.device[:4]]}}
        """,
        r"""
        {{invoke_tool("yosys")}}
            -s {{name}}.ys {% for file in platform.iter_files(".v", ".sv") -%} {{file}} {% endfor %} {{name}}.v
        """,
        r"""
        {{invoke_tool("nextpnr-xilinx")}}
            --chipdb "$NEXPNR_CHIPDB_DIR/$PART.bin"
            --xdc {{name}}.xdc
            --json {{name}}.json
            --write {{name}}_routed.json
            --fasm {{name}}.fasm
        """,
        r"""
        {{invoke_tool("fasm2frames")}}
            --part $PART
            --db-root "$PRJXRAY_DB_DIR/$FAMILY" {{name}}.fasm > {{name}}.frames
        """,
        r"""
        {{invoke_tool("xc7frames2bit")}}
            --part_file "$PRJXRAY_DB_DIR/$FAMILY/$PART/part.yaml"
            --part_name $PART
            --frm_file {{name}}.frames
            --output_file {{name}}.bit
            --compressed
        """,
    ]

    def __init__(self, *, toolchain=None):
        self.override_toolchain = toolchain == "ghdl_yosys_nextpnr_prjxray"
        super().__init__(
            toolchain="ISE" if self.override_toolchain else toolchain)
        self.ghdl_tops = set()
        self.ghdl_libraries = dict()

    @property
    def required_tools(self):
        if self.override_toolchain:
            return self._ghdl_yosys_nextpnr_prjxray_required_tools
        else:
            return super().required_tools()

    @property
    def file_templates(self):
        if self.override_toolchain:
            return self._ghdl_yosys_nextpnr_prjxray_file_templates
        else:
            return super().file_templates()

    @property
    def command_templates(self):
        if self.override_toolchain:
            return self._ghdl_yosys_nextpnr_prjxray_command_templates
        else:
            return super().command_templates()

    def create_missing_domain(self, name):
        return super(XilinxPlatform, self).create_missing_domain(name)


class GhdlInstance(Elaboratable):
    def __init__(self, type, *args, **kwargs):
        self.files = kwargs.pop("files", [])
        self.instance = Instance(type, *args, **kwargs)

    def elaborate(self, platform):
        for filename in self.files:
            with open(filename, 'r') as f:
                platform.add_file(str(filename), f)
        platform.ghdl_tops.add(self.instance.type)
        return self.instance.elaborate(platform)


class GhdlLibrary(Elaboratable):
    def __init__(self, name, files):
        self.library_name = name
        self.library_files = files

    def elaborate(self, platform):
        for filename in self.library_files:
            with open(filename, 'r') as _:
                pass
        platform.ghdl_libraries[self.library_name] = self.library_files
        return Module()
